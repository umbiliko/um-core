declare const store: import("redux").Store<{
    set: {};
    delete: {};
    remove: {};
    clear: {};
    update: {};
    merge: {};
    mergeWith: {};
    mergeDeep: {};
    mergeDeepWith: {};
    setIn: {};
    deleteIn: {};
    removeIn: {};
    updateIn: {};
    mergeIn: {};
    mergeDeepIn: {};
    withMutations: {};
    asMutable: {};
    asImmutable: {};
    toSeq: {};
    size: {
        toString: any;
        toFixed: any;
        toExponential: any;
        toPrecision: any;
        valueOf: any;
        toLocaleString: any;
    };
    equals: {};
    hashCode: {};
    get: {};
    has: {};
    includes: {};
    contains: {};
    first: {};
    last: {};
    getIn: {};
    hasIn: {};
    toJS: {};
    toArray: {};
    toObject: {};
    toMap: {};
    toOrderedMap: {};
    toSet: {};
    toOrderedSet: {};
    toList: {};
    toStack: {};
    toKeyedSeq: {};
    toIndexedSeq: {};
    toSetSeq: {};
    keys: {};
    values: {};
    entries: {};
    keySeq: {};
    valueSeq: {};
    entrySeq: {};
    map: {};
    filter: {};
    filterNot: {};
    reverse: {};
    sort: {};
    sortBy: {};
    groupBy: {};
    forEach: {};
    slice: {};
    rest: {};
    butLast: {};
    skip: {};
    skipLast: {};
    skipWhile: {};
    skipUntil: {};
    take: {};
    takeLast: {};
    takeWhile: {};
    takeUntil: {};
    concat: {};
    flatten: {};
    flatMap: {};
    reduce: {};
    reduceRight: {};
    every: {};
    some: {};
    join: {};
    isEmpty: {};
    count: {};
    countBy: {};
    find: {};
    findLast: {};
    findEntry: {};
    findLastEntry: {};
    findKey: {};
    findLastKey: {};
    keyOf: {};
    lastKeyOf: {};
    max: {};
    maxBy: {};
    min: {};
    minBy: {};
    isSubset: {};
    isSuperset: {};
    flip: {};
    mapKeys: {};
    mapEntries: {};
}, import("redux").AnyAction>;
export default store;
